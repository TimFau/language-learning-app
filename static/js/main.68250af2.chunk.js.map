{"version":3,"sources":["Functions.js","components/Nav.js","components/ProgressBar.js","components/ButtonsContainer.js","components/Modes/FlashCard.js","components/Modes/WordBank.js","components/Modes/Keyboard.js","components/Form.js","components/DeckSelector.js","App.js","serviceWorker.js","index.js"],"names":["wordBankHelper","ranNum1","curArr","initArr","returnValue","i","length","concat","Math","floor","random","Set","a","j","shuffle","Nav","props","AppBar","position","Button","onClick","goToDeckSelector","variant","color","progressBar","value","className","LinearProgress","langOneArrLength","initialCount","buttonsContainer","success","incorrect","showAnswer","getCard","size","type","handleSubmit","translateMode","langTwoArr","randomNum","langOneArr","flashCard","Card","CardContent","Typography","langTo","archiveCard","showAnswerFc","children","langFrom","CardActions","wordBank","map","word","index","e","keyboardModeHandleChange","fullWidth","key","keyBoard","TextField","placeholder","translationInputValue","onChange","form","onSubmit","id","inputMode","FlashCard","language1","language2","Keyboard","WordBank","Dialog","open","DialogTitle","DialogContent","ButtonGroup","DeckSelector","useState","dialogOpen","setDialogOpen","newList","setNewList","currentList","setCurrentList","currentListId","setCurrentListId","setInputMode","customListInputValue","setCustomListInputValue","deckOptions","listName","listId","customListHandleChange","event","console","log","target","Grid","container","direction","justify","gutterBottom","component","onClose","dividers","label","orientation","setTranslationMode1","setTranslationMode2","setList","switchInput","progressWidth","langOneArrInit","langTwoArrInit","TranslationApp","spreadsheetID","getData","setState","deckStarted","state","checkAccents","dataLoaded","bind","switchTranslationMode","undefined","fetch","mode","then","response","json","data","feed","entry","forEach","item","push","gsx$language1","$t","gsx$langauge2","shift","randomNum2","slice","handleWordBank","this","document","addEventListener","isComposing","keyCode","querySelectorAll","modal","style","display","splice","width","currentTarget","preventDefault","inputValueRegex","toLowerCase","trim","replace","correctAnswerRegex","normalize","Form","ProgressBar","ButtonsContainer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68250af2.chunk.js","sourcesContent":["function shuffle(a) {\r\n    for (let i = a.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [a[i], a[j]] = [a[j], a[i]];\r\n    } return a;\r\n}\r\nexport function wordBankHelper(ranNum1, curArr, initArr) {\r\n    var returnValue = [curArr[ranNum1]];\r\n    var i = 0;\r\n    while (returnValue.length < 4 && i < 10) {\r\n        i++;\r\n        returnValue = returnValue.concat(initArr[Math.floor(Math.random() * initArr.length)]);\r\n        returnValue = new Set(returnValue); // removes duplicates\r\n        returnValue = [...returnValue]; // converts back to array\r\n    }\r\n    return (\r\n        shuffle(returnValue)\r\n    )\r\n}","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/ToolBar';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default function Nav(props) {\r\n      \r\n    return (\r\n        <AppBar position=\"static\">\r\n            <ToolBar>\r\n                <Button\r\n                    onClick={props.goToDeckSelector}\r\n                    variant=\"link\"\r\n                    color=\"primary\"\r\n                >Change Deck</Button>\r\n            </ToolBar>\r\n        </AppBar>\r\n    )\r\n}","import React from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst progressBar = (props) => {\r\n    const normalise = value => (value - props.initialCount) * 100 / (0 - props.initialCount);\r\n    return (\r\n        <div className=\"container progress-container\">\r\n            <LinearProgress variant=\"determinate\" value={normalise(props.langOneArrLength)}/>\r\n            <span>{props.langOneArrLength} out of {props.initialCount} words left</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default progressBar;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst buttonsContainer = (props) => {\r\n    return (\r\n        <div \r\n            className={'bottom-button-wrap ' + (props.success ? 'success' : '') + (props.incorrect ? 'incorrect' : '')} \r\n        >\r\n            {!props.showAnswer ?\r\n            <div>\r\n                <Button\r\n                    onClick={props.getCard}\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                >Skip</Button>\r\n                <Button\r\n                    type=\"submit\"\r\n                    value=\"submit\"\r\n                    onClick={props.handleSubmit}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                >Check</Button>\r\n            </div>\r\n            : \r\n                <Button variant=\"contained\" onClick={props.getCard} className=\"btn btn-danger btn-lg\">Continue</Button>\r\n            }\r\n            {props.success && props.showAnswer ?\r\n            <div className=\"alert alert-success container-fluid\">\r\n                <div className=\"message\">\r\n                    <h4>Correct!</h4>\r\n                    {/* <span>{props.translateMode === \"1to2\" ? props.langTwoArr[props.randomNum] : props.langOneArr[props.randomNum]}</span> */}\r\n                </div>\r\n            </div>\r\n            : null }\r\n            {props.incorrect && props.showAnswer ?\r\n            <div className=\"alert alert-danger container-fluid\">\r\n                <div className=\"message\">\r\n                    <h4>Correct answer:</h4>\r\n                    <span>{props.translateMode === \"1to2\" ? props.langTwoArr[props.randomNum] : props.langOneArr[props.randomNum]}</span>\r\n                </div>\r\n            </div>\r\n            : null }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default buttonsContainer;","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst flashCard = (props) => {\r\n    return(\r\n        <Card className=\"flash-card-container\">\r\n            {props.showAnswer ? (\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\">Answer</Typography>\r\n                    <h1 className=\"lang-to\">\"{props.langTo[props.randomNum]}\"</h1>\r\n                    <div className=\"btn-container flipped\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            onClick={props.getCard}\r\n                        >I got it wrong</Button >\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={props.archiveCard}\r\n                        >I got it right</Button >\r\n                    </div>\r\n                </CardContent>\r\n            ) : (\r\n                <CardContent onClick={props.showAnswerFc}>\r\n                    <Typography color=\"textSecondary\">{props.children}</Typography>\r\n                    <h1 className=\"lang-from\">\"{props.langFrom[props.randomNum]}\"</h1>\r\n                    <div className=\"btn-container\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >See Answer</Button >\r\n                    </div>\r\n                </CardContent>\r\n            )}\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default flashCard;\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst flashCard = (props) => {\r\n    return(\r\n        <Card className=\"list-group word-bank\">\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\">{props.children}</Typography>\r\n                <Typography variant=\"h1\">\"{props.langFrom[props.randomNum]}\"</Typography>\r\n                {/* <Typography variant=\"h1\">\"{props.langTo[props.randomNum]}\"</Typography> */}\r\n            </CardContent>\r\n            <CardActions>\r\n            { props.wordBank.map((word, index) =>\r\n                <Button\r\n                    type=\"button\"\r\n                    className=\"list-group-item\"\r\n                    value={word}\r\n                    onClick={(e) => props.keyboardModeHandleChange(e)}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    fullWidth\r\n                    key={index}>\r\n                        {word} \r\n                        {/* <a className=\"google-translate\" href={\"https://translate.google.com/#view=home&textMi%20chaimo%20Tim&text=\" + word + \"&op=translate&sl=it&tl=en\"} target=\"_blank\"><i className=\"material-icons\">g_translate</i></a> */}\r\n                </Button>\r\n            ) }\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default flashCard;\r\n\r\n\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst keyBoard = (props) => {\r\n    return(\r\n        <Card className=\"keyboard-container\">\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\">{props.children}</Typography>\r\n                <h1 className=\"lang-from\">\"{props.langFrom[props.randomNum]}\"</h1>\r\n                {/* <h1 className=\"lang-to\">\"{props.langTo[props.randomNum]}\"</h1> */}\r\n                <TextField \r\n                    type=\"text\" \r\n                    variant=\"outlined\"\r\n                    placeholder=\"Enter translation\"\r\n                    value={props.translationInputValue}\r\n                    onChange={(e) => props.keyboardModeHandleChange(e)}\r\n                    className=\"form-control\"\r\n                />\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default keyBoard;\r\n","import React from 'react';\r\nimport FlashCard from './Modes/FlashCard';\r\nimport WordBank from './Modes/WordBank';\r\nimport Keyboard from './Modes/Keyboard';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nconst form = (props) => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {props.children /* Progress bar */}\r\n            <form onSubmit={props.handleSubmit}  id=\"mainApp\">\r\n                {props.inputMode === 'Flashcard' ?\r\n                    <FlashCard \r\n                    showAnswerFc={() => props.showAnswerFc()}\r\n                    showAnswer={props.showAnswer}\r\n                    getCard={props.getCard}\r\n                    archiveCard={props.archiveCard}\r\n                    langTo={props.langTo}\r\n                    langFrom={props.langFrom}\r\n                    randomNum={props.randomNum}\r\n                    >\r\n                        Translate to <span>{props.translateMode === \"1to2\" ? props.language1 : props.language2}</span>\r\n                    </FlashCard>\r\n                : null }\r\n                {props.inputMode === 'Keyboard' ?\r\n                    <Keyboard \r\n                        langTo={props.langTo}\r\n                        langFrom={props.langFrom}\r\n                        randomNum={props.randomNum}\r\n                        translationInputValue={props.translationInputValue}\r\n                        keyboardModeHandleChange={(e) => props.keyboardModeHandleChange(e)}\r\n                    >\r\n                        Translate to <span>{props.translateMode === \"1to2\" ? props.language2 : props.language1}</span>\r\n                    </Keyboard>\r\n                : null }\r\n                {props.inputMode === 'Wordbank' ?\r\n                    <WordBank \r\n                        langTo={props.langTo}\r\n                        langFrom={props.langFrom}\r\n                        randomNum={props.randomNum}\r\n                        wordBank={props.wordBank}\r\n                        keyboardModeHandleChange={(e) => props.keyboardModeHandleChange(e)}\r\n                        translateMode={props.translateMode}\r\n                    >\r\n                        Translate to <span>{props.translateMode === \"1to2\" ? props.language2 : props.language1}</span>\r\n                    </WordBank>\r\n                : null }\r\n            </form>\r\n            <Dialog id=\"success-modal\" open={props.langOneArrLength === 0}>\r\n                <DialogTitle>\r\n                    Congralutations!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <h3>You've finished the list!</h3>\r\n                </DialogContent>\r\n                <ButtonGroup\r\n                    color=\"primary\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                >\r\n                    <Button variant=\"contained\" onClick={props.goToDeckSelector}>Return to Deck Selector</Button>\r\n                </ButtonGroup>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default form;","import React, { useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nexport default function DeckSelector(props) {\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [newList, setNewList] = useState(false);\r\n    const [currentList, setCurrentList] = useState(null);\r\n    const [currentListId, setCurrentListId] = useState(null);\r\n    const [inputMode, setInputMode] = useState('Flashcard');\r\n    const [customListInputValue, setCustomListInputValue] = useState(null);\r\n    \r\n    function deckOptions(listName, listId) {\r\n        setCurrentList(listName)\r\n        setCurrentListId(listId)\r\n        setNewList(false)\r\n        setDialogOpen(true)\r\n    }\r\n\r\n    function addNewList() {\r\n        setNewList(true)\r\n        setDialogOpen(true)\r\n    }\r\n\r\n    function startDeck(listId) {\r\n        props.switchInput(inputMode)\r\n        props.setList(listId)\r\n    }\r\n\r\n    function customListHandleChange(event) {\r\n        console.log(event)\r\n        console.log(event.target.value)\r\n        setCustomListInputValue(event.target.value)\r\n\t}\r\n\r\n    function deckDialog() {\r\n        return (\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} className=\"deck-dialog\">\r\n                <DialogTitle id=\"simple-dialog-title\">{ newList ? 'Load new' : 'Deck Options' }</DialogTitle>\r\n                <DialogContent dividers>\r\n                    {!newList ? \r\n                        <Typography gutterBottom>Selected List: <strong>{currentList}</strong></Typography>\r\n                    : \r\n                        <TextField \r\n                            value={customListInputValue}\r\n                            onChange={customListHandleChange} \r\n                            variant=\"outlined\"\r\n                            label=\"Google Spreadsheet ID\"\r\n                            fullWidth\r\n                        />\r\n                    }\r\n                    <Typography >Choose Mode</Typography>\r\n                    <ButtonGroup\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    >\r\n                        <Button\r\n                            variant={inputMode === 'Flashcard' ? 'contained' : null}\r\n                            onClick={() => setInputMode('Flashcard')}\r\n                        >Flashcard</Button>\r\n                        <Button\r\n                            variant={inputMode === 'Wordbank' ? 'contained' : null}\r\n                            onClick={() => setInputMode('Wordbank')}\r\n                        >Wordbank</Button>\r\n                        <Button\r\n                            variant={inputMode === 'Keyboard' ? 'contained' : null}\r\n                            onClick={() => setInputMode('Keyboard')}\r\n                        >Keyboard</Button>\r\n                    </ButtonGroup>\r\n                    <Typography >Choose Order</Typography>\r\n                    <ButtonGroup\r\n                        color=\"primary\"\r\n                        orientation=\"vertical\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    >\r\n                        <Button\r\n                            variant={props.translateMode === '1to2' ? 'contained' : null}\r\n                            onClick={() => props.setTranslationMode1()}\r\n                        >{props.language1} to {props.language2}</Button>\r\n                        <Button\r\n                            variant={props.translateMode === '2to1' ? 'contained' : null}\r\n                            onClick={() => props.setTranslationMode2()}\r\n                        >{props.language2} to {props.language1}</Button>\r\n                    </ButtonGroup>\r\n                </DialogContent>\r\n                {!newList ? \r\n                    <Button\r\n                        // On Click\r\n                            // Send value to setList in App.js\r\n                        onClick={() => startDeck(currentListId)}\r\n                    >Start Deck</Button>\r\n                : \r\n                    <Button\r\n                        onClick={(value) => props.setList(customListInputValue)}\r\n                    >Load</Button>\r\n                }\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper deck-selector\">\r\n            <div className=\"lang-wrapper\">\r\n                <h1>Choose a Deck</h1> \r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                >\r\n                    <Card onClick={() => deckOptions('Italian Basics', '1DntQwj2nfvobtxkOExsSMm2DLHQNlzf2q48WhWlMqAM')}>\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Italian Basics\r\n                            </Typography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Button size=\"small\" color=\"palette.secondary.dark\">Select List</Button>\r\n                        </CardActions>\r\n                    </Card>\r\n                    <Card onClick={() => deckOptions('Italian Other', '16PNgsOyvfz6BIpjCqHMtMWBg59qLhyj5TVvmXzSzmPA')}>\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Italian Other\r\n                            </Typography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Button size=\"small\">Select List</Button>\r\n                        </CardActions>\r\n                    </Card>\r\n                    <Card onClick={() => deckOptions('Spanish Basics', '1DNL5d4bJXOdAMnWtQesxksF4aTDFjtAV5xnFVfVbc5w')}>\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Spanish\r\n                            </Typography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Button size=\"small\">Select List</Button>\r\n                        </CardActions>\r\n                    </Card>\r\n                    <Card onClick={() => deckOptions('Test List', '1_qux2HIN3GhyYmaDF2KCg1JAAoe8c6xhPV228mR5hq8')}>\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Test List\r\n                            </Typography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Button size=\"small\">Select List</Button>\r\n                        </CardActions>\r\n                    </Card>\r\n                </Grid>\r\n                <Button onClick={() => addNewList()}>Load Custom</Button>\r\n            </div>\r\n            { deckDialog() }\r\n            {/* { loadNewDialog() } */}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './css/main.scss';\r\nimport {wordBankHelper} from './Functions';\r\nimport Nav from './components/Nav';\r\nimport ProgressBar from './components/ProgressBar';\r\nimport ButtonsContainer from './components/ButtonsContainer';\r\nimport Form from './components/Form';\r\nimport DeckSelector from './components/DeckSelector';\r\n\r\n// global vars\r\nvar langOneArr = [];\r\nvar langTwoArr = [];\r\nvar progressWidth = {};\r\nvar langOneArrInit = [];\r\nvar langTwoArrInit = [];\r\n\r\nclass TranslationApp extends React.Component {\r\n  \tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t// state initialization\r\n    \tthis.state = {\r\n\t\t\tlanguage1: '',\r\n\t\t\tlanguage2: '',\r\n\t\t\tlangFrom: '',\r\n\t\t\tlangTo: '',\r\n\t\t\ttranslationInputValue: '',\r\n\t\t\twordBank: [],\r\n\t\t\tcurrentList: '',\r\n\t\t\t// set default state values\r\n\t\t\ttranslateMode: '1to2',\r\n\t\t\tinputMode: 'Flashcard',\r\n\t\t\tcheckAccents: false,\r\n\t\t\tdataLoaded: false,\r\n\t\t\tshowAnswer: false,\r\n\t\t\tdeckStarted: false,\r\n\t\t\tsuccess: false,\r\n\t\t\tincorrect: false\r\n\t\t};\r\n\t\t// bindings\r\n\t\tthis.getCard = this.getCard.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t\tthis.keyboardModeHandleChange = this.keyboardModeHandleChange.bind(this);\r\n\t\tthis.switchInput = this.switchInput.bind(this);\r\n\t\tthis.switchTranslationMode = this.switchTranslationMode.bind(this);\r\n\t\tthis.showAnswerFc = this.showAnswerFc.bind(this);\r\n\t\tthis.archiveCard = this.archiveCard.bind(this);\r\n\t\tthis.setList = this.setList.bind(this);\r\n\t\tthis.goToDeckSelector = this.goToDeckSelector.bind(this);\r\n\t\tthis.setTranslationMode1 = this.setTranslationMode1.bind(this);\r\n\t\tthis.setTranslationMode2 = this.setTranslationMode2.bind(this);\r\n\t}\r\n\t  \r\n\tgetData(value) {\r\n\t\t// Set default list\r\n\t\tif (value === undefined) {\r\n\t\t\tvalue = \"1DntQwj2nfvobtxkOExsSMm2DLHQNlzf2q48WhWlMqAM\"\r\n\t\t}\r\n\t\tlet request = \"https://spreadsheets.google.com/feeds/list/\" + value + \"/od6/public/values?alt=json\";\r\n\t\tfetch(request, {mode: 'cors'})\r\n\t\t\t.then( response => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then( data => {\r\n\t\t\t\tconsole.log(data.feed.entry)\r\n\t\t\t\tlangOneArr = [];\r\n\t\t\t\tlangTwoArr = [];\r\n\t\t\t\tprogressWidth = {};\r\n\t\t\t\tdata.feed.entry.forEach(function(item){\r\n\t\t\t\t\tlangOneArr.push(item.gsx$language1.$t);\r\n\t\t\t\t\tlangTwoArr.push(item.gsx$langauge2.$t);\r\n\t\t\t\t})\r\n\t\t\t\tthis.setState(state => ({\r\n\t\t\t\t\tlanguage1: langOneArr.shift(),\r\n\t\t\t\t\tlanguage2: langTwoArr.shift(),\r\n\t\t\t\t\tinitialCount: langOneArr.length,\r\n\t\t\t\t\trandomNum: Math.floor(Math.random() * langOneArr.length),\r\n\t\t\t\t\trandomNum2: (Math.floor(Math.random() * langOneArr.length) - 4),\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tincorrect: false,\r\n\t\t\t\t\tcurrentList: value\r\n\t\t\t\t}))\r\n\t\t\t\tlangOneArrInit = langOneArr.slice();\r\n\t\t\t\tlangTwoArrInit = langTwoArr.slice();\r\n\t\t\t\tthis.handleWordBank();\r\n\t\t\t\tthis.getCard();\r\n\t\t\t\tthis.setState({ dataLoaded: true })\r\n\t\t\t})//.bind(this);\r\n\t}\r\n\r\n\tcomponentWillMount() {\r\n\t\tthis.getData();\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tdocument.addEventListener(\"keydown\", event => {\r\n\t\t\t// show card on space, up, or down\r\n\t\t\tif (event.isComposing || event.keyCode === 40 || event.keyCode === 38) {\r\n\t\t\t\tthis.setState({showAnswer: true})\r\n\t\t\t}\r\n\t\t\t// archive card/skip on left or '~'\r\n\t\t\tif (event.isComposing || event.keyCode === 37 || event.keyCode === 192) {\r\n\t\t\t\tthis.archiveCard();\r\n\t\t\t}\r\n\t\t\t// go to next card on right or 'enter'\r\n\t\t\tif (event.isComposing || event.keyCode === 39 || event.keyCode === 13) {\r\n\t\t\t\tif(this.state.inputMode === 'Flashcard') {\r\n\t\t\t\t\tthis.getCard();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.handleSubmit(event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tconsole.log(this.props)\r\n\t}\r\n\t\r\n\tgetCard() {\r\n\t\tconsole.log('getCard');\r\n\t\tdocument.querySelectorAll('.modal').forEach(modal => {modal.style.display = \"none\"})\r\n\t\tif (this.state.success) {\r\n\t\t\tlangOneArr.splice(this.state.randomNum, 1);\r\n\t\t\tlangTwoArr.splice(this.state.randomNum, 1);\r\n\t\t}\r\n\t\tthis.setState((state, props) =>  ({\r\n\t\t\trandomNum: Math.floor(Math.random() * langOneArr.length),\r\n\t\t\trandomNum2: Math.floor(Math.random() * langOneArrInit.length),\r\n\t\t\tsuccess: false,\r\n\t\t\tincorrect: false,\r\n\t\t\ttranslationInputValue: '',\r\n\t\t\tlangFrom: this.state.translateMode === '1to2' ? langOneArr : langTwoArr,\r\n\t\t\tlangTo: this.state.translateMode === '1to2' ? langTwoArr : langOneArr,\r\n\t\t\tshowAnswer: false\r\n\t\t}));\r\n\t\tthis.handleWordBank();\r\n\t\tprogressWidth = {\r\n\t\t\twidth: (this.state.initialCount - langOneArr.length) * (100 / this.state.initialCount) + '%'\r\n\t\t}\r\n\t\t// if(langOneArr.length === 0){\r\n\t\t// \tdocument.getElementById('success-modal').style.display = \"block\";\r\n\t\t// }\r\n\t}\r\n\r\n\tarchiveCard() {\r\n\t\tlangOneArr.splice(this.state.randomNum, 1);\r\n\t\tlangTwoArr.splice(this.state.randomNum, 1);\r\n\t\tthis.getCard();\r\n\t}\r\n\r\n\thandleWordBank() {\r\n\t\tthis.setState((state) => {\r\n\t\t\tif(this.state.translateMode === '1to2'){\r\n\t\t\t\treturn {\r\n\t\t\t\t\twordBank: wordBankHelper(state.randomNum, langTwoArr, langTwoArrInit)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn {\r\n\t\t\t\t\twordBank: wordBankHelper(state.randomNum, langOneArr, langOneArrInit)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\t\r\n\tkeyboardModeHandleChange(e) {\r\n\t\tconsole.log('keyboardModeHandleChange');\r\n\t\tconsole.log(e.currentTarget.value);\r\n\t\tthis.setState({translationInputValue: e.currentTarget.value})\r\n\t}\r\n\t\r\n\thandleSubmit(event) {\r\n\t\tevent.preventDefault();\r\n\t\tvar inputValueRegex = this.state.translationInputValue.toLowerCase().trim().replace(/\\./g,'');\r\n\t\tvar correctAnswerRegex = this.state.langTo[this.state.randomNum].toLowerCase().trim().replace(/\\./g,'');\r\n\t\tif(this.state.checkAccents === false) {\r\n\t\t\tinputValueRegex = inputValueRegex.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n\t\t\tcorrectAnswerRegex = correctAnswerRegex.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n\t\t}\r\n\t\tconsole.log(inputValueRegex, correctAnswerRegex);\r\n\t\tconsole.log(inputValueRegex === correctAnswerRegex);\r\n\t\tif (inputValueRegex === correctAnswerRegex) {\r\n\t\t\tthis.setState({success: true})\r\n\t\t\tconsole.log('if', this.state.success)\r\n\t\t}  else {\r\n\t\t\tthis.setState({incorrect: true})\r\n\t\t\tconsole.log('else', this.state.success)\r\n\t\t}\r\n\t\tthis.setState({showAnswer: true});\r\n\t}\r\n\r\n\tswitchInput(value) {\r\n\t\tif(value === 'Wordbank' && this.state.inputMode !== 'Wordbank'){\r\n\t\t\tthis.setState({\r\n\t\t\t\tinputMode: 'Wordbank'\r\n\t\t\t})\r\n\t\t} else if(value === 'Keyboard' && this.state.inputMode !== 'Keyboard'){\r\n\t\t\tthis.setState({\r\n\t\t\t\tinputMode: 'Keyboard'\r\n\t\t\t})\r\n\t\t} else if(value === 'Flashcard' && this.state.inputMode !== 'Flashcard'){\r\n\t\t\tthis.setState({\r\n\t\t\t\tinputMode: 'Flashcard'\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tsetTranslationMode1() {\r\n\t\tthis.setState({\r\n\t\t\ttranslateMode: '1to2'\r\n\t\t})\r\n\t}\r\n\r\n\tsetTranslationMode2() {\r\n\t\tthis.setState({\r\n\t\t\ttranslateMode: '2to1'\r\n\t\t})\r\n\t}\r\n\r\n\tswitchTranslationMode() {\r\n\t\tif(this.state.translateMode === '1to2'){\r\n\t\t\tthis.setState({\r\n\t\t\t\ttranslateMode: '2to1'\r\n\t\t\t}, () => {\r\n\t\t\t\tthis.getCard();\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\ttranslateMode: '1to2'\r\n\t\t\t}, () => {\r\n\t\t\t\tthis.getCard();\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tshowAnswerFc() {\r\n\t\tconsole.log('showAnswerFc');\r\n\t\tthis.setState({showAnswer: true})\r\n\t}\r\n\r\n\tgoToDeckSelector() {\r\n\t\tthis.setState({\r\n\t\t\tdeckStarted: false\r\n\t\t})\r\n\t}\r\n\r\n\tsetList = (listId) => {\r\n\t\tconsole.log('setList')\r\n\t\tconsole.log(listId)\r\n\t\tlet spreadsheetID = listId;\r\n\t\tthis.getData(spreadsheetID);\r\n\t\tthis.setState({\r\n\t\t\tdeckStarted: true\r\n\t\t})\r\n\t\tconsole.log(listId)\r\n\t}\r\n\t\r\n\trender() {\r\n    \treturn (\r\n\t\t\t<div className={\"container main-container \" + this.state.inputMode}>\r\n\t\t\t\t<Nav \r\n\t\t\t\t\tsetList={this.setList}\r\n\t\t\t\t\tswitchInput={this.switchInput}\r\n\t\t\t\t\tswitchTranslationMode={this.switchTranslationMode}\r\n\t\t\t\t\tlanguage1={this.state.language1}\r\n\t\t\t\t\tlanguage2={this.state.language2}\r\n\t\t\t\t\ttranslateMode={this.state.translateMode}\r\n\t\t\t\t\tgoToDeckSelector={this.goToDeckSelector}\r\n\t\t\t\t/>\r\n\t\t\t\t{this.state.deckStarted ?\r\n\t\t\t\t<Form\r\n\t\t\t\t\tdataLoaded={this.state.dataLoaded}\r\n\t\t\t\t\thandleSubmit={this.handleSubmit}\r\n\t\t\t\t\tinputMode={this.state.inputMode}\r\n\t\t\t\t\tshowAnswerFc={this.showAnswerFc}\r\n\t\t\t\t\tshowAnswer={this.state.showAnswer}\r\n\t\t\t\t\tgetCard={this.getCard}\r\n\t\t\t\t\tarchiveCard={this.archiveCard}\r\n\t\t\t\t\tlangTo={this.state.langTo}\r\n\t\t\t\t\tlangFrom={this.state.langFrom}\r\n\t\t\t\t\trandomNum={this.state.randomNum}\r\n\t\t\t\t\ttranslateMode={this.state.translateMode}\r\n\t\t\t\t\tlanguage1={this.state.language1}\r\n\t\t\t\t\tlanguage2={this.state.language2}\r\n\t\t\t\t\ttranslationInputValue={this.state.translationInputValue}\r\n\t\t\t\t\tkeyboardModeHandleChange={this.keyboardModeHandleChange}\r\n\t\t\t\t\twordBank={this.state.wordBank}\r\n\t\t\t\t\tgoToDeckSelector={this.goToDeckSelector}\r\n\t\t\t\t\tlangOneArrLength={langOneArr.length}\r\n\t\t\t\t>\r\n\t\t\t\t\t<ProgressBar \r\n\t\t\t\t\tlangOneArrLength={langOneArr.length}\r\n\t\t\t\t\tprogressWidth={progressWidth}\r\n\t\t\t\t\tinitialCount={this.state.initialCount}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Form>\r\n\t\t\t\t: \r\n\t\t\t\t<DeckSelector \r\n\t\t\t\t\tlanguage1={this.state.language1}\r\n\t\t\t\t\tlanguage2={this.state.language2}\r\n\t\t\t\t\tsetList={this.setList}\r\n\t\t\t\t\ttranslateMode={this.state.translateMode}\r\n\t\t\t\t\tsetTranslationMode1={this.setTranslationMode1}\r\n\t\t\t\t\tsetTranslationMode2={this.setTranslationMode2}\r\n\t\t\t\t\tswitchInput={this.switchInput}\r\n\t\t\t\t>\r\n\t\t\t\t\t\r\n\t\t\t\t</DeckSelector>\r\n\t\t\t\t}\r\n\t\t\t\t{this.state.inputMode !== 'Flashcard' && this.state.deckStarted ?\r\n\t\t\t\t\t<ButtonsContainer \r\n\t\t\t\t\t\thandleSubmit={this.handleSubmit}\r\n\t\t\t\t\t\ttranslateMode={this.state.translateMode}\r\n\t\t\t\t\t\tgetCard={this.getCard}\r\n\t\t\t\t\t\trandomNum={this.state.randomNum}\r\n\t\t\t\t\t\tlangOneArr={langOneArr}\r\n\t\t\t\t\t\tlangTwoArr={langTwoArr}\r\n\t\t\t\t\t\tsuccess={this.state.success}\r\n\t\t\t\t\t\tincorrect={this.state.incorrect}\r\n\t\t\t\t\t\tshowAnswer={this.state.showAnswer}\r\n\t\t\t\t\t/>\r\n\t\t\t\t: null }\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default TranslationApp;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport TranslationApp from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<TranslationApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}